<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhetos.Persistence.Interfaces</name>
    </assembly>
    <members>
        <member name="M:Rhetos.Persistence.IPersistenceCache.ClearCache">
            <summary>
            Clears in-memory cache that is used for lazy loading.
            </summary>
        </member>
        <member name="T:Rhetos.Persistence.IPersistenceTransaction">
            <summary>
            Similar to the "unit of work" pattern.
            </summary>
        </member>
        <member name="M:Rhetos.Persistence.IPersistenceTransaction.DiscardChanges">
            <summary>
            DiscardChanges marks the transaction as invalid. The changes will be discarded (rollback executed) on Dispose.
            </summary>
        </member>
        <member name="E:Rhetos.Persistence.IPersistenceTransaction.BeforeClose">
            <summary>
            Use for cleanup code, such as deleting temporary data that may be used until the transaction is closed.
            This event will not be invoked if the transaction rollback was executed (see <see cref="M:Rhetos.Persistence.IPersistenceTransaction.DiscardChanges"/>).
            </summary>
        </member>
        <member name="M:Rhetos.Persistence.IPersistenceTransaction.CommitAndReconnect">
            <summary>
            Drops the database connection and creates a new one to release the database locks.
            This method should not be used during regular server run-time because it splits the unit of work
            making it impossible to rollback the whole session in case of a need.
            </summary>
        </member>
        <member name="P:Rhetos.Persistence.IPersistenceTransaction.Connection">
            <summary>
            When reading this property the database connection will be automatically opened and a transaction started.
            Do not close or modify this connection directly.
            A single server request will be executed in one transaction. If the server request fails, the transaction will be rolled back.
            If you need to execute an SQL query outside of the server request's transaction, create a new database connection using Rhetos.Utilities.SqlUtility.ConnectionString.
            </summary>
        </member>
        <member name="P:Rhetos.Persistence.IPersistenceTransaction.Transaction">
            <summary>
            Returns null if the <see cref="P:Rhetos.Persistence.IPersistenceTransaction.Connection"/> is not used yet.
            Do not close or modify this transaction directly.
            See the <see cref="P:Rhetos.Persistence.IPersistenceTransaction.Connection"/> property for more details.
            </summary>
        </member>
    </members>
</doc>
