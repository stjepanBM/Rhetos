<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhetos.Dsl</name>
    </assembly>
    <members>
        <member name="T:Rhetos.Dsl.ConceptMacroUtility">
            <summary>
            A helper for accessing IConceptMacro&lt;&gt; plugins.
            The plugins have generic interface to simplify plugin implementation.
            This class wraps a plugin and provides a non-generic interface, to simplify use of the plugin.
            </summary>
        </member>
        <member name="T:Rhetos.Dsl.DslContainer">
            <summary>
            This class implements IDslModel, but it may return empty or partly initialized list of concepts, as opposed to
            DslModel class (also implements IDslModel) that always makes sure that the DSL model is fully initialized
            before returning the concepts.
            </summary>
        </member>
        <member name="F:Rhetos.Dsl.DslContainer.UnresolvedReference.Member">
            <summary>A member property on the Dependant concept that references another concept.</summary>
        </member>
        <member name="F:Rhetos.Dsl.DslContainer.AddNewConceptsReport.NewUniqueConcepts">
            <summary>A subset of given new concepts. Some of the returned concepts might not have their references resolved yet.</summary>
        </member>
        <member name="F:Rhetos.Dsl.DslContainer.AddNewConceptsReport.NewlyResolvedConcepts">
            <summary>May include previously given concepts that have been resolved now.</summary>
        </member>
        <member name="M:Rhetos.Dsl.DslContainer.AddNewConceptsAndReplaceReferences(System.Collections.Generic.IEnumerable{Rhetos.Dsl.IConceptInfo})">
            <summary>
            Updates concept references to reference existing instances from DslModel matched by the concept key.
            Returns new unique concepts that did not previously exist in DslModel
            (note that some of the returned concepts might not have their references resolved yet).
            </summary>
        </member>
        <member name="M:Rhetos.Dsl.DslContainer.ReplaceReferencesWithFullConcepts(System.Collections.Generic.IEnumerable{Rhetos.Dsl.DslContainer.ConceptDescription})">
            <summary>
            Since DSL parser returns stub references, this function replaces each reference with actual instance of the referenced concept.
            Function returns concepts that have newly resolved references.
            Note: This method could handle circular dependencies between the concepts, but for simplicity of the implementation this is currently not supported.
            </summary>
        </member>
        <member name="M:Rhetos.Dsl.DslContainer.MarkResolvedConcept(Rhetos.Dsl.DslContainer.ConceptDescription)">
            <summary>
            Returns new resolved concepts that were waiting for this concept to be resolved.
            </summary>
        </member>
        <member name="T:Rhetos.Dsl.GenericParser">
            <summary>
            NOTES:
            1. Parsing is done in the order as the properties are declares in the source.
            2. If the first property implements IConceptInfo, it is possible to embed the concept within that parent concept.
            ("module x { entity y; }") or to use it explicitly ("entity x.y;").
            3. If the first property type is IConceptInfo interface, not the implementation, it can reference any concept
            but can be used only in the embedded form.
            4. Recursive "parent" property (referencing the same concept type) does not have to be the first property
            to be used in the embedded form. This allows construction of recursive concepts such as menus.
            </summary>
        </member>
        <member name="T:Rhetos.Dsl.MacroOrderRepository">
            <summary>
            Reads from file the recommended order of macro concepts evaluation.
            The order is optimized to reduce number of iteration in macro evaluation.
            </summary>
        </member>
        <member name="M:Rhetos.Dsl.MacroOrderRepository.Load">
            <summary>
            Dictionary's Key is EvaluatorName, Value is EvaluatorOrder.
            </summary>
        </member>
        <member name="M:Rhetos.Dsl.MacroOrderRepository.Save(System.Collections.Generic.IEnumerable{Rhetos.Dsl.MacroOrder})">
            <param name="macroOrders">Tuple's Item1 is EvaluatorName, Item2 is EvaluatorOrder.</param>
        </member>
        <member name="M:Rhetos.Dsl.TokenReader.SkipEndOfFile">
            <summary>
            This method should only be called between parsing two concepts.
            </summary>
        </member>
    </members>
</doc>
